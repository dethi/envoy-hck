// protos/time.proto
//
// This file defines the gRPC service and messages for the time streaming service.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: protos/time.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TimeService_StreamTime_FullMethodName = "/time.TimeService/StreamTime"
)

// TimeServiceClient is the client API for TimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The time service definition.
type TimeServiceClient interface {
	// A server-to-client streaming RPC.
	//
	// Obtains the current time from the server and streams it back to the client.
	StreamTime(ctx context.Context, in *TimeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TimeResponse], error)
}

type timeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTimeServiceClient(cc grpc.ClientConnInterface) TimeServiceClient {
	return &timeServiceClient{cc}
}

func (c *timeServiceClient) StreamTime(ctx context.Context, in *TimeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TimeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TimeService_ServiceDesc.Streams[0], TimeService_StreamTime_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TimeRequest, TimeResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TimeService_StreamTimeClient = grpc.ServerStreamingClient[TimeResponse]

// TimeServiceServer is the server API for TimeService service.
// All implementations must embed UnimplementedTimeServiceServer
// for forward compatibility.
//
// The time service definition.
type TimeServiceServer interface {
	// A server-to-client streaming RPC.
	//
	// Obtains the current time from the server and streams it back to the client.
	StreamTime(*TimeRequest, grpc.ServerStreamingServer[TimeResponse]) error
	mustEmbedUnimplementedTimeServiceServer()
}

// UnimplementedTimeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTimeServiceServer struct{}

func (UnimplementedTimeServiceServer) StreamTime(*TimeRequest, grpc.ServerStreamingServer[TimeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamTime not implemented")
}
func (UnimplementedTimeServiceServer) mustEmbedUnimplementedTimeServiceServer() {}
func (UnimplementedTimeServiceServer) testEmbeddedByValue()                     {}

// UnsafeTimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimeServiceServer will
// result in compilation errors.
type UnsafeTimeServiceServer interface {
	mustEmbedUnimplementedTimeServiceServer()
}

func RegisterTimeServiceServer(s grpc.ServiceRegistrar, srv TimeServiceServer) {
	// If the following call pancis, it indicates UnimplementedTimeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TimeService_ServiceDesc, srv)
}

func _TimeService_StreamTime_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TimeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TimeServiceServer).StreamTime(m, &grpc.GenericServerStream[TimeRequest, TimeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TimeService_StreamTimeServer = grpc.ServerStreamingServer[TimeResponse]

// TimeService_ServiceDesc is the grpc.ServiceDesc for TimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "time.TimeService",
	HandlerType: (*TimeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTime",
			Handler:       _TimeService_StreamTime_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/time.proto",
}
